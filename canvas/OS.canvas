{
	"nodes":[
		{"id":"176871335e37c004","type":"file","file":"OS imp.docx","x":-180,"y":-280,"width":400,"height":400},
		{"id":"8a7003345dc66592","type":"text","text":"4.\tPractice all the problems of CPU scheduling algorithms discussed in class (10m)(V V V IMP)","x":1035,"y":709,"width":405,"height":111},
		{"id":"3192e9f1dc474401","type":"text","text":"FCFS","x":1563,"y":648,"width":250,"height":60},
		{"id":"3585f3a0aa3b3b0a","type":"text","text":"SJF","x":1599,"y":775,"width":250,"height":60},
		{"id":"9e96c053298562f6","type":"text","text":"With preemption","x":1940,"y":707,"width":250,"height":60,"color":"1"},
		{"id":"0a24dd997ea7694a","type":"text","text":"W/O Preemption","x":1936,"y":859,"width":250,"height":60},
		{"id":"ee81ab21412460f8","type":"text","text":"Problems","x":1411,"y":1007,"width":250,"height":60},
		{"id":"88391efe5de67269","type":"text","text":"1) Discuss CPU scheduling algorithms with the following example and find avg. waiting time and avg. turn aroused time in a) FCFS b) SJF c) RR (Time slice = 2 ms).\n\nProcess Burst time Arrival time\n\nP1                    10         0\n\nP2                    2          0\n\nP3                    4          1\n\nP4                    5          2\n\nP5                    3          1","x":1846,"y":1034,"width":494,"height":406},
		{"id":"eb875c51b977b5f2","type":"file","file":"Excalidraw/Drawing 2024-03-10 18.00.35.excalidraw.md","x":2420,"y":1220,"width":400,"height":400},
		{"id":"df0c0f8beec88bdf","type":"text","text":"RR","x":1617,"y":898,"width":250,"height":60,"color":"1"},
		{"id":"3eef5f2d9fab36bd","type":"text","text":"1.     Differentiate between process and thread. (or) What resources are used when a thread is created and how do they differ from those used when a process is created. (2/5M) ( V V IMP)\n\n2.     Explain about process states and process transition diagram. (or) Draw the state diagram of a process from its creation to termination (or) Discuss the various states in which a process can exist with the help of a state diagram (5m/10m) (V V IMP)\n\n3.     Write about inter process communication.(or)Explain two models of inter process communication\n\n(or) Describe about inter process communication mechanisms in detail with block diagrams. (2m/5m/10m) (V IMP)\n\n4.     Practice all the problems of CPU scheduling algorithms discussed in class (10m)(V V V IMP)\n\n5.     What is a thread? Explain different types of thread. Explain threading models. (or) Mention the components in a multi thread process that share across the threads. (or) Describe the actions taken by a thread library to context switch between user level threads. (V V IMP)\n\n6.     What is PCB? Explain the purpose of PCB. (or) Draw a neat diagram of PCB.(2/4/5m) (V IMP)\n\n7.     What are semaphores?  Explain different types of Semaphores with examples. (or) What is Semaphore? Explain how it is used to solve the critical section problem with example. (or) Define semaphore. What are its limitations? (or) What is a semaphore? List the operations that can be performed on semaphore. (or) What is a semaphore? Explain a binary semaphore with the help of an example? (or) How are counting semaphores different from binary semaphores?(2/4/5m) (V V IMP)\n\n8.     Define the following terms:(2/3/4m each)          (V V IMP)\n\na)     Multiprogramming\n\nb)     Multitasking or Time sharing\n\nc)     Multiprocessing\n\nd)     Real Time Systems\n\ne)     CPU utilization\n\nf)      Throughput\n\ng)     Waiting time\n\n9.     Explain all three problems of classical problem of synchronization (producer-consumer, reader-writer, dining philosopher). (or) Explain the reader-writer problem of synchronization and explain the semaphore solution for it. (or) What is dining philosophers problem?(5/10m) (V V V IMP)\n\n10.  Explain resource allocation graph with example.(2/4/5m) (V IMP)\n\n11.  What are the necessary conditions for deadlock to occur?(2/3m) (V IMP)\n\n12.  Explain deadlock prevention techniques. (or) Explain the protocols used for deadlock prevention (3/4/5m) (V IMP)\n\n13.  Explain deadlock avoidance in detail. (or) With a suitable example, explain the deadlock avoidance algorithms for a system with multiple instances of an each resource type.(5m) (V IMP)\n\n14.  Explain banker’s algorithm with example (or) Explain Deadlock avoidance by using Bankers Algorithm with an example. (Practice all  problems discussed in class)(10m) (V V V IMP)\n\n15.  Explain how to recover from deadlock. (or) List and explain the methods used for deadlock recovery.(5m) (V IMP)\n\n16.  Discuss multilevel queue and multilevel feedback queue scheduling algorithm.(5/10m) (V IMP)\n\n17.  Explain critical section problem. (2m/5m) (V V IMP)\n\n18.  What is a System call? Give any two examples. (or) What is the difference between system programs and system calls? (2m/5m) (V IMP)\n\n19.  Define race condition with an example. (or) When does a ‘race condition’ occur?(2/3m) (V IMP)\n\n20.  What is starvation and aging? (or) Define starvation and how this problem can be solved. (2/3/4/5m) (IMP)","x":-98,"y":220,"width":1018,"height":1460},
		{"id":"274a8d48ae369343","type":"text","text":"1.     Differentiate between process and thread. (or) What resources are used when a thread is created and how do they differ from those used when a process is created. (2/5M) ( V V IMP)\n\n2.     Explain about process states and process transition diagram. (or) Draw the state diagram of a process from its creation to termination (or) Discuss the various states in which a process can exist with the help of a state diagram (5m/10m) (V V IMP)\n\n3.     Write about inter process communication.(or)Explain two models of inter process communication\n\n(or) Describe about inter process communication mechanisms in detail with block diagrams. (2m/5m/10m) (V IMP)\n\n4.     Practice all the problems of CPU scheduling algorithms discussed in class (10m)(V V V IMP)\n\n5.     What is a thread? Explain different types of thread. Explain threading models. (or) Mention the components in a multi thread process that share across the threads. (or) Describe the actions taken by a thread library to context switch between user level threads. (V V IMP)\n\n6.     What is PCB? Explain the purpose of PCB. (or) Draw a neat diagram of PCB.(2/4/5m) (V IMP)\n\n7.     What are semaphores?  Explain different types of Semaphores with examples. (or) What is Semaphore? Explain how it is used to solve the critical section problem with example. (or) Define semaphore. What are its limitations? (or) What is a semaphore? List the operations that can be performed on semaphore. (or) What is a semaphore? Explain a binary semaphore with the help of an example? (or) How are counting semaphores different from binary semaphores?(2/4/5m) (V V IMP)\n\n8.     Define the following terms:(2/3/4m each)          (V V IMP)\n\na)     Multiprogramming\n\nb)     Multitasking or Time sharing\n\nc)     Multiprocessing\n\nd)     Real Time Systems\n\ne)     CPU utilization\n\nf)      Throughput\n\ng)     Waiting time\n\n9.     Explain all three problems of classical problem of synchronization (producer-consumer, reader-writer, dining philosopher). (or) Explain the reader-writer problem of synchronization and explain the semaphore solution for it. (or) What is dining philosophers problem?(5/10m) (V V V IMP)\n\n10.  Explain resource allocation graph with example.(2/4/5m) (V IMP)\n\n11.  What are the necessary conditions for deadlock to occur?(2/3m) (V IMP)\n\n12.  Explain deadlock prevention techniques. (or) Explain the protocols used for deadlock prevention (3/4/5m) (V IMP)\n\n13.  Explain deadlock avoidance in detail. (or) With a suitable example, explain the deadlock avoidance algorithms for a system with multiple instances of an each resource type.(5m) (V IMP)\n\n14.  Explain banker’s algorithm with example (or) Explain Deadlock avoidance by using Bankers Algorithm with an example. (Practice all  problems discussed in class)(10m) (V V V IMP)\n\n15.  Explain how to recover from deadlock. (or) List and explain the methods used for deadlock recovery.(5m) (V IMP)\n\n16.  Discuss multilevel queue and multilevel feedback queue scheduling algorithm.(5/10m) (V IMP)\n\n17.  Explain critical section problem. (2m/5m) (V V IMP)\n\n18.  What is a System call? Give any two examples. (or) What is the difference between system programs and system calls? (2m/5m) (V IMP)\n\n19.  Define race condition with an example. (or) When does a ‘race condition’ occur?(2/3m) (V IMP)\n\n20.  What is starvation and aging? (or) Define starvation and how this problem can be solved. (2/3/4/5m) (IMP)","x":-98,"y":220,"width":1018,"height":1460},
		{"id":"b34efdba064e4a45","type":"text","text":"9.     Explain all three problems of classical problem of synchronization (producer-consumer, reader-writer, dining philosopher). (or) Explain the reader-writer problem of synchronization and explain the semaphore solution for it. (or) What is dining philosophers problem?(5/10m) (V V V IMP)","x":1092,"y":1552,"width":444,"height":288},
		{"id":"0a02fcf334b31705","type":"text","text":"Semaphores","x":1754,"y":1784,"width":250,"height":60},
		{"id":"7062f97a89678b23","type":"text","text":"Signal","x":2100,"y":1869,"width":250,"height":60},
		{"id":"b8e70a5f0f2073ef","type":"text","text":"Wait ","x":2100,"y":1724,"width":250,"height":60},
		{"id":"400f0f496bc2aaa0","type":"text","text":"```c\nP (semaphore s){\nwhile (s<=0)\n\t;\ns--;\n}\n```","x":2454,"y":1680,"width":250,"height":164},
		{"id":"b1937a5c6bc210a9","type":"text","text":"``` c\nV (sempahore s){\ns++\n}\n```","x":2456,"y":1929,"width":250,"height":131},
		{"id":"b1f3e81f4df92b50","type":"text","text":"Producer","x":2080,"y":2140,"width":250,"height":60},
		{"id":"1b14eff446ebc3b0","type":"text","text":"Consumer","x":2080,"y":2220,"width":250,"height":60},
		{"id":"322028eb5fa23d73","type":"text","text":"Bounded buffer problem","x":1754,"y":2174,"width":250,"height":60},
		{"id":"e152b3a59acb4a43","type":"file","file":"Pasted image 20240310183556.png","x":2420,"y":2140,"width":400,"height":155},
		{"id":"3684487f34cd3a04","type":"text","text":"Semaphores Used","x":2080,"y":2300,"width":250,"height":60},
		{"id":"9fc2c25ba1a3825f","type":"file","file":"Pasted image 20240310183630.png","x":2420,"y":2400,"width":510,"height":131},
		{"id":"e3267cc35678f13b","type":"text","text":"Simple numeric value to synchronize processes and control access to critical sections","x":1800,"y":1555,"width":250,"height":141},
		{"id":"7e7ce951562895cc","type":"file","file":"Pasted image 20240310183807.png","x":3020,"y":2218,"width":400,"height":372},
		{"id":"24c7a3180befacca","type":"file","file":"Pasted image 20240310183757.png","x":3020,"y":1827,"width":400,"height":371},
		{"id":"4c8238c4bdb8e47f","type":"text","text":"Reader Writer Problem","x":1793,"y":2498,"width":250,"height":60},
		{"id":"a2d3195703843781","type":"file","file":"Pasted image 20240310184148.png","x":2100,"y":2620,"width":399,"height":230},
		{"id":"9a1805acaf75faf8","type":"file","file":"Pasted image 20240311012524.png","x":2056,"y":2940,"width":400,"height":219},
		{"id":"bbda6d64c9adfa74","type":"file","file":"Pasted image 20240311012550.png","x":1960,"y":3240,"width":627,"height":180},
		{"id":"faaea46be1f80bca","type":"file","file":"OS unit 1.pdf","x":3698,"y":-360,"width":862,"height":520},
		{"id":"0118ad83fa679b10","type":"file","file":"Excalidraw/Drawing 2024-03-22 17.42.07.excalidraw.md","x":2534,"y":-420,"width":870,"height":780},
		{"id":"0e1a135bd53168b9","type":"text","text":"Concept of OS","x":4793,"y":-336,"width":250,"height":60},
		{"id":"a90177d18354fe35","type":"text","text":"Generations of OS","x":4793,"y":-236,"width":250,"height":60},
		{"id":"7570e22f9af82a40","type":"text","text":"Types of OS","x":4793,"y":-136,"width":250,"height":60},
		{"id":"66580a8e4455369b","type":"text","text":"Second Generation","x":5198,"y":-843,"width":250,"height":60},
		{"id":"1fe6a3fc31813581","type":"text","text":"Third Generation","x":5198,"y":-723,"width":250,"height":60},
		{"id":"88bcb3a60e50a3cc","type":"text","text":"\nSerial Processing\nNo os\nVaccum Tubes\nelectricity and heat more\nMachine language\neg ENIAC\n\n","x":5582,"y":-1098,"width":330,"height":190},
		{"id":"fd5a621cf2fd4de6","type":"text","text":"Batch System\nIO Operation by CPU (Processor had lots of IDLE time)\nlaid foundation for Multi tasking\n","x":5582,"y":-888,"width":250,"height":190},
		{"id":"d32653e210f273fd","type":"text","text":"Multi tasking\nOnline storage\nIC\nNo Starvation","x":5582,"y":-678,"width":261,"height":117},
		{"id":"96dba9a82fdafe03","type":"text","text":"First Generation","x":5198,"y":-603,"width":250,"height":60},
		{"id":"ea68f54cee7b6b38","type":"text","text":"GUI\nComputer networking\nMax CPU util\nPriority wise exec","x":5582,"y":-541,"width":280,"height":160},
		{"id":"11ece5153ffeb7fd","type":"text","text":"First Generation","x":5198,"y":-935,"width":250,"height":60},
		{"id":"70fa4c6f4699f80a","type":"text","text":"Batch OS","x":5140,"y":-118,"width":250,"height":60},
		{"id":"1c8c391f6a3f1523","type":"text","text":"Time Sharing OS","x":5140,"y":-38,"width":250,"height":60},
		{"id":"de2e6ec7a8cb8706","type":"text","text":"Distrubuted","x":5140,"y":42,"width":250,"height":60},
		{"id":"984a35d04144b650","type":"text","text":"Network OS","x":5140,"y":122,"width":250,"height":60},
		{"id":"fe87ee4b804b9415","type":"text","text":"Realtime OS","x":5140,"y":202,"width":250,"height":60},
		{"id":"50464c47fdb2ac8a","type":"text","text":"OS services","x":4793,"y":282,"width":250,"height":60},
		{"id":"daa58699613129f6","type":"text","text":"System calls","x":4793,"y":382,"width":250,"height":60},
		{"id":"ba9b89eed4e68966","type":"text","text":"process execution\nfile system management\nIO operations \nError handling\ncommunication\nprotection","x":5192,"y":312,"width":341,"height":191},
		{"id":"6e0392043124df84","type":"text","text":"Interface b/w User Space and Kernel\nProvides controlled access to sys resources\neg: malloc,free(),open,read,write\nTransition to kernel mode\n\n![[Pasted image 20240322205302.png]]\n![[Pasted image 20240322205332.png]]\n","x":5140,"y":570,"width":630,"height":750},
		{"id":"dec76348e963cd8d","type":"text","text":"What it is, diagram\nWhat it does - functions","x":5238,"y":-336,"width":250,"height":60},
		{"id":"00d482cfe02bd671","type":"text","text":"Server that connect...\nFile sharing...\nDia\n![[Pasted image 20240322194724.png]]\nadv\ndisadv","x":6100,"y":-507,"width":406,"height":423},
		{"id":"82bfb3bcb649907e","type":"text","text":"Response time\nused in\ndisadv\n\n![[Pasted image 20240322194809.png]]","x":6100,"y":-44,"width":231,"height":335},
		{"id":"e3ef2f99e7eaca1e","type":"text","text":"what\ndia: ![[Pasted image 20240322194131.png]]\nsuppose 3 process..\nquantum\n\nonly one process runs at a time but..","x":6100,"y":-1607,"width":650,"height":428},
		{"id":"767146d5af10a216","type":"text","text":" a model that uses multiple computers to run applications, while each computer has its own processor and memory\n\nloosely coupled\ndia\n![[Pasted image 20240322194630.png]]\n\nadv\ndisadv","x":6100,"y":-1139,"width":496,"height":592},
		{"id":"f4b65f11b0d6bfe3","type":"file","file":"Pasted image 20240322192433.png","x":6100,"y":-1882,"width":500,"height":235},
		{"id":"faa8fbc57ff70a40","type":"text","text":"saving the state...\ntrigerred by....","x":5080,"y":1420,"width":250,"height":192},
		{"id":"2e762c1e0952bf5e","type":"text","text":"Context switching","x":4760,"y":1390,"width":250,"height":60},
		{"id":"ecb3d7e35d88eb4a","type":"text","text":"diff b/w user mode and kernel mode","x":5936,"y":497,"width":250,"height":60},
		{"id":"bbda407919f6bedc","type":"text","text":"access to sys res\ninterrupt will cause...\nUnpreviliged aka restricted mode vs .. .. mode\nSeparate VAS, Single VAS","x":6288,"y":485,"width":436,"height":170},
		{"id":"705e7c70d4c4b833","type":"text","text":"Types","x":6013,"y":853,"width":250,"height":60},
		{"id":"ffab760a9d2a3c7e","type":"file","file":"Pasted image 20240322211235.png","x":6303,"y":729,"width":769,"height":432},
		{"id":"00c2ff68de22894e","type":"file","file":"Pasted image 20240322211347.png","x":7200,"y":511,"width":880,"height":686},
		{"id":"e58268b6c6ccca40","type":"text","text":"Types of OS","x":4737,"y":1803,"width":250,"height":60},
		{"id":"6be1eb69407579e0","type":"text","text":"Monolithic\nall OS services are..\ntightly integrated\neffiecient\ncomplex\nlimited modularity\neg early unix","x":5078,"y":2240,"width":342,"height":220},
		{"id":"e357ad2c8aef6000","type":"file","file":"Pasted image 20240322213056.png","x":5540,"y":2200,"width":652,"height":380},
		{"id":"27169175186853e8","type":"text","text":"Layered\nOS is broken down into... bot top, organized hirarchically...adv,disadv\n![[Pasted image 20240322212609.png]]\n","x":5069,"y":1720,"width":702,"height":457},
		{"id":"d3299e451b0aef4a","type":"text","text":"Micro kernel-\nminimalistic kernel\nmodularity\nreliability\nflexibility and extensibility\nperformance tradeoff due to increased..\neg early OSX","x":5069,"y":2641,"width":387,"height":199},
		{"id":"390dbfab20fd54ca","type":"text","text":"Microkernel-based operating systems represent a modular approach to OS design where the kernel provides only essential functionality, such as inter-process communication and memory management, while other services traditionally handled by the kernel, like device drivers and file systems, are implemented as user-space processes. Here are some key points about microkernel-based operating systems:\n\n1. **Minimalistic Kernel**: The microkernel contains a minimal set of essential functions, focusing primarily on process management, inter-process communication (IPC), and memory management. These functions are critical for managing and coordinating system resources.\n\n2. **Modularity**: Microkernel architectures emphasize modularity, separating the kernel's core functionality from higher-level services. Additional services, such as device drivers, file systems, and networking protocols, are implemented as separate user-space processes, known as servers or daemons.\n\n3. **Improved Reliability**: By minimizing the size and complexity of the kernel, microkernel-based operating systems aim to improve system reliability and robustness. Since critical system components are isolated from each other, faults or errors in one component are less likely to impact the entire system.\n\n4. **Flexibility and Extensibility**: Microkernel architectures offer flexibility and extensibility, allowing system designers to add or replace services dynamically without modifying the kernel. This modular design facilitates easier maintenance, upgrades, and customization of the operating system.\n\n5. **Performance Trade-offs**: While microkernels offer benefits in terms of reliability and flexibility, they may incur performance overhead due to the increased communication overhead between user-space servers and the microkernel. Context switches between user-space and kernel-space are typically more expensive in microkernel architectures compared to monolithic kernels.\n\n6. **Examples**: Notable examples of microkernel-based operating systems include QNX, MINIX, and early versions of Mac OS X (which used the Mach microkernel).\n\nIn summary, microkernel-based operating systems offer improved reliability, flexibility, and maintainability compared to monolithic kernels, but may incur performance overhead due to increased communication between kernel and user-space components.","x":6560,"y":2580,"width":838,"height":827},
		{"id":"418e86af458e9114","type":"file","file":"Pasted image 20240322214404.png","x":5580,"y":2641,"width":722,"height":513},
		{"id":"06a64b55709edd17","type":"text","text":"Isolation\nHypervisor\nResource sharing\nportability\nuse cases\nperformance overhead","x":5078,"y":3294,"width":443,"height":227},
		{"id":"6d7d95d77684ac6b","type":"text","text":"Virtualization","x":4724,"y":3194,"width":261,"height":100},
		{"id":"10fc6d82e8b449d7","type":"file","file":"Pasted image 20240322215326.png","x":5683,"y":3294,"width":517,"height":552},
		{"id":"1b141c4b12e68bb7","type":"text","text":"## UNIT 2","x":8840,"y":-840,"width":480,"height":450,"color":"4"},
		{"id":"bd1ba4cb2040dcf4","type":"file","file":"Excalidraw/Drawing 2024-03-22 17.42.07.excalidraw.md","x":7320,"y":-1080,"width":1390,"height":1405},
		{"id":"1486ad25c1b68a42","type":"text","text":"Process states","x":9488,"y":-681,"width":250,"height":60},
		{"id":"0028662b749edea0","type":"text","text":"Processs def","x":9488,"y":-937,"width":250,"height":60},
		{"id":"f3a3a9d1b071a3f7","type":"text","text":"PCB - Process Control Block","x":9488,"y":-240,"width":250,"height":60},
		{"id":"ea8c0c08bb92a093","type":"text","text":"Context Switching","x":9488,"y":500,"width":250,"height":60},
		{"id":"78aaf45ae2824995","type":"text","text":"Thread","x":9488,"y":1159,"width":250,"height":131,"color":"1"},
		{"id":"5997022a45356039","type":"text","text":"Threads in the context of operating systems are essentially lightweight processes that enable a program to perform multiple tasks concurrently within a single process. Here are some key points about threads:\n\n1. **Concurrency**: Threads allow multiple tasks to be executed simultaneously within the same process. This concurrency can lead to improved performance and responsiveness in applications, particularly in tasks like multitasking or handling multiple users.\n\n2. **Shared Resources**: Threads within the same process share resources such as memory space, file descriptors, and other process-related attributes. This makes communication and data sharing between threads more efficient compared to separate processes.\n\n3. **Thread States**: Threads typically have states such as running, ready, blocked, and terminated. The operating system scheduler manages the execution of threads, transitioning them between these states based on their activities and resource availability.\n\n4. **Thread Synchronization**: Since threads share resources, it's essential to synchronize their access to prevent conflicts and data corruption. Techniques like locks, semaphores, and barriers are used to coordinate thread execution and access to shared data structures.\n\n5. **User-level vs. Kernel-level Threads**: Threads can be implemented at the user level by the runtime library or at the kernel level by the operating system. User-level threads are managed entirely by the application and are more lightweight but may suffer from limitations in utilizing multiple CPU cores efficiently. Kernel-level threads are managed by the operating system and provide better support for multicore systems but may incur higher overhead.\n\n\n","x":10681,"y":1290,"width":946,"height":513},
		{"id":"aa4d09cbed6a510d","type":"text","text":"Multithreaded server architecture","x":10338,"y":1690,"width":250,"height":60},
		{"id":"77df4e11dac3dc7b","type":"file","file":"Pasted image 20240322231254.png","x":10588,"y":1850,"width":400,"height":204},
		{"id":"508499a9ef319c3c","type":"text","text":"1. Concurrency\n2. shared resources\n3. simplified programming\n4. asynchronous programming\n5. responsiveness","x":10531,"y":2104,"width":337,"height":166},
		{"id":"5eb10130c132eb2a","type":"text","text":"Threads offer several advantages in the context of operating systems and software development:\n\n1. **Concurrency**: Threads enable concurrent execution of tasks within a single process, allowing applications to perform multiple operations simultaneously. This concurrency can lead to improved performance and responsiveness, especially in tasks such as user interface updates, network communication, and parallel computation.\n\n2. **Resource Sharing**: Threads within the same process share resources such as memory space, file descriptors, and other process-related attributes. This allows for efficient communication and data sharing between threads, reducing the need for complex inter-process communication mechanisms.\n\n3. **Simplified Programming**: Using threads simplifies the programming model for concurrent applications compared to processes. Threads within the same process can easily communicate and synchronize with each other using shared memory and synchronization primitives, making it easier to write and maintain multi-threaded code.\n\n4. **Improved Responsiveness**: By allowing tasks to execute concurrently, threads can improve the responsiveness of applications by ensuring that critical operations do not block the entire program. For example, a user interface thread can remain responsive while a background thread performs resource-intensive computations.\n\n\n5. **Asynchronous Programming**: Threads enable asynchronous programming paradigms, where tasks can execute concurrently without blocking the main execution flow. This is particularly useful for handling I/O operations, such as file I/O or network communication, without waiting for the operation to complete before proceeding with other tasks.\n\n","x":10961,"y":2146,"width":1067,"height":464},
		{"id":"f46f783e880b1056","type":"file","file":"Pasted image 20240322231507.png","x":10672,"y":1020,"width":553,"height":238},
		{"id":"8135ae8c75675905","type":"text","text":"Waiting for other event to trigger/finish\nDelayed like snooze\nBlocked for I/O task","x":11330,"y":1078,"width":278,"height":132},
		{"id":"4115932b3059a58e","type":"text","text":"Suspend wait and Suspend ready ??","x":11225,"y":-907,"width":250,"height":60},
		{"id":"af9220ce68606202","type":"file","file":"Pasted image 20240322220437.png","x":10228,"y":-1148,"width":753,"height":667},
		{"id":"a7d7dbac008a4cb8","type":"file","file":"Pasted image 20240322221429.png","x":10209,"y":-286,"width":386,"height":628},
		{"id":"81c5a43e2dc54595","type":"text","text":"  \nPointer: A stack pointer that preserves the process's position during state transitions.  \nProcess state: Stores the current state of a process.  \nProcess number: Unique identifier assigned to each process, known as Process ID (PID).  \nProgram counter: Holds the address of the next instruction to execute for the process.  \nRegister: Registers in the Process Control Block (PCB) store process-specific data, facilitating context switches by preserving register values during process suspension and resumption.  \nMemory Management Information – page table, memory limits, segment table\nOpen files list: Maintains a record of files accessed by a process during its execution.","x":10642,"y":-286,"width":1377,"height":213},
		{"id":"d8224663377b48fc","type":"text","text":"1. **Definition**: Context switching is the process of saving and restoring the state of a CPU's execution context so that multiple processes can share a single CPU efficiently.\n    \n2. **State Preservation**: During a context switch, the operating system saves the state of the currently executing process, including its program counter, register values, and other relevant CPU state information.\n    \n3. **Switching Mechanism**: The operating system determines when to perform a context switch based on scheduling policies, such as time slicing or priority-based scheduling. When a new process is selected for execution, the OS saves the current process's state and loads the state of the new process into the CPU.\n\t\n4. **Trigger**: Context switches can be triggered by various events, including timer interrupts, I/O operations, or process scheduling decisions made by the operating system scheduler.\n\t\n5. **Preemption**: Context switches often occur preemptively, meaning the operating system interrupts the currently executing process to give CPU time to another process with higher priority or a more urgent task.","x":10209,"y":500,"width":720,"height":480},
		{"id":"2842b36852710fa9","type":"text","text":"def\nstate preservation\nswitching mecha\ntriggers\npreemption","x":11010,"y":696,"width":250,"height":164},
		{"id":"438c95b7e34285b5","type":"text","text":"Allows concurrency\nShared resources\nThread States\nSync\nUser level vs kernel level\nAdvantages","x":10228,"y":1118,"width":279,"height":185},
		{"id":"bfd141236889ff6b","type":"text","text":"Diff b/w process and thread","x":10338,"y":2927,"width":250,"height":138},
		{"id":"3ae06c8068f01834","type":"file","file":"Pasted image 20240322232857.png","x":11123,"y":2840,"width":967,"height":665},
		{"id":"5bcca0bf353ccc83","type":"text","text":"Def\nTime for creation\nTime for termination\nContext Switching\nIPC\nIndependence\nHave different address space, Have same address space ","x":10678,"y":2892,"width":360,"height":248},
		{"id":"409e1db2af4dd131","type":"text","text":"Types of Threads","x":10338,"y":3760,"width":250,"height":60},
		{"id":"7fdf4b232be8768b","type":"text","text":"User Level Thread\nKernel Level Thread","x":10788,"y":3700,"width":250,"height":60},
		{"id":"f143ba40a15e6d79","type":"text","text":"\n\n1. **User-Level Threads (ULTs)**:\n   - **Managed by User-Level Libraries**: User-level threads are managed entirely by the runtime library or programming language environment without kernel support. Examples include POSIX Threads (pthreads) in Unix-like systems and Windows threads in Microsoft Windows.\n   - **Lightweight**: ULTs are lightweight because they do not require kernel involvement for thread management. Thread creation, scheduling, and synchronization are handled by the user-level threading library, resulting in lower overhead compared to kernel-level threads.\n   - **Fast Context Switching**: Since ULTs are managed at the user level, context switching between threads is typically faster compared to kernel-level threads. Context switches involve switching between user-space thread contexts without the overhead of transitioning to kernel mode.\n   - **Limited by Single-Core Performance**: User-level threads are often limited to running on a single CPU core since the operating system kernel is unaware of their existence. As a result, they may not fully utilize multi-core processors.\n   - **Scalability Issues**: Applications using ULTs may face scalability issues on multi-core systems because the user-level threading library cannot take advantage of multiple CPU cores for parallel execution.\n\n2. **Kernel-Level Threads (KLTs)**:\n   - **Managed by the Operating System Kernel**: Kernel-level threads are created, scheduled, and managed directly by the operating system kernel. Each thread is represented as a kernel data structure and has its own kernel stack.\n   - **Higher Overhead**: KLTs incur higher overhead compared to ULTs because thread management involves system calls to the kernel for thread creation, scheduling, and synchronization. Context switches between kernel-level threads also require transitioning to kernel mode, which adds overhead.\n   - **Better Parallelism and Scalability**: Since KLTs are managed by the kernel, they can be scheduled to run on multiple CPU cores simultaneously, allowing for better parallelism and scalability on multi-core systems. The kernel can distribute threads across cores for optimal performance.\n   - **Support for Preemption**: Kernel-level threads can be preemptively scheduled by the operating system, allowing the kernel to interrupt threads and switch to another thread when necessary. This preemptive scheduling ensures fair CPU allocation and responsiveness.\n   - **Support for Blocking Operations**: KLTs can block on system calls that involve I/O operations or synchronization primitives without affecting other threads in the system. The kernel can schedule other threads to run while one thread is blocked, maximizing CPU utilization.","x":11840,"y":3560,"width":969,"height":801},
		{"id":"89814b136e0f6887","type":"text","text":"Common:\nManaged by...\nLightweight/High overhead\nSingle core vs Parellelism\nFast vs Slow Context Switching\n\nULTs: Scalability issues\nKLTs: Preemption support\nSupport for blocking operations","x":11200,"y":3820,"width":396,"height":343},
		{"id":"e4497f6014383f61","type":"text","text":"Multithreading","x":10394,"y":4525,"width":250,"height":60},
		{"id":"e078d5137f2ee806","type":"text","text":"Def\nTypes","x":10759,"y":4518,"width":250,"height":60},
		{"id":"26c73dfedfb13495","type":"text","text":"\n\n1. **Multithreading Overview**:\n   - Multithreading refers to the concurrent execution of multiple threads within the same process. Each thread represents a separate flow of execution with its own program counter, stack, and state, but they share the same memory space and resources of the parent process.\n   - Multithreading enables applications to perform multiple tasks concurrently, improving responsiveness, efficiency, and resource utilization.\n\n2. **Types of Multithreading**:\n\n   a. **Many-to-One Model**:\n      - In this model, multiple user-level threads are mapped to a single kernel-level thread.\n      - Thread management is handled entirely by a user-level threading library or runtime environment without kernel support.\n      - Advantages include lightweight threads, fast context switching, and simplicity of implementation.\n      - Disadvantages include limited parallelism and scalability due to running user-level threads on a single kernel-level thread.\n\n   b. **One-to-One Model**:\n      - In this model, each user-level thread is mapped to a separate kernel-level thread.\n      - Thread management is handled by the operating system kernel, allowing for better parallelism, scalability, and preemptive scheduling.\n      - Advantages include better utilization of multi-core processors, support for blocking operations without blocking other threads, and preemptive scheduling.\n      - Disadvantages include higher overhead due to the creation and management of kernel-level threads, potentially leading to decreased performance in scenarios with excessive thread creation.\n\n   c. **Many-to-Many Model**:\n      - This model combines aspects of the many-to-one and one-to-one models.\n      - Multiple user-level threads are multiplexed onto a smaller or equal number of kernel-level threads.\n      - Thread management involves collaboration between the user-level threading library and the operating system kernel.\n      - Advantages include a balance between lightweight threads and kernel-level thread management, improved scalability, and flexibility in thread scheduling.\n      - Disadvantages include complexity in implementation and potential overhead associated with thread multiplexing and coordination between user-level and kernel-level threads.","x":11241,"y":4506,"width":999,"height":854},
		{"id":"dc6f90c3c8c99fdd","type":"file","file":"Pasted image 20240323003558.jpg","x":12400,"y":4465,"width":488,"height":325},
		{"id":"adaf181b7118c19d","type":"file","file":"Pasted image 20240323003600.jpg","x":12400,"y":4831,"width":488,"height":325},
		{"id":"43ff9bdc12fba660","type":"file","file":"Pasted image 20240323003557.jpg","x":12400,"y":5197,"width":488,"height":325},
		{"id":"2fccb33a1230a562","type":"file","file":"pl n os question papers_page-0016 1.jpg","x":5272,"y":-8502,"width":367,"height":519},
		{"id":"e77beeffe261d88c","type":"file","file":"pl n os question papers_page-0006 1.jpg","x":5272,"y":-9080,"width":367,"height":519},
		{"id":"bfb1c4a1f1dbde57","type":"file","file":"pl n os question papers_page-0022 1.jpg","x":5272,"y":-7886,"width":367,"height":519},
		{"id":"e87c74979de18027","type":"file","file":"pl n os question papers_page-0017 1.jpg","x":5849,"y":-8502,"width":367,"height":519},
		{"id":"65c8944666cd9654","type":"file","file":"pl n os question papers_page-0018 1.jpg","x":6427,"y":-8502,"width":367,"height":519},
		{"id":"65b769845de2cb67","type":"file","file":"pl n os question papers_page-0007 1.jpg","x":5849,"y":-9080,"width":367,"height":519},
		{"id":"92e3eff0387398bf","type":"file","file":"pl n os question papers_page-0009 1.jpg","x":6427,"y":-9080,"width":367,"height":519},
		{"id":"527b931ec8e3b25b","type":"file","file":"pl n os question papers.pdf","x":2525,"y":-10080,"width":907,"height":811},
		{"id":"0eb07984b6d6faf6","type":"file","file":"pl n os question papers_page-0001 1.jpg","x":2384,"y":-9080,"width":367,"height":519},
		{"id":"37eb6771f894cf57","type":"file","file":"pl n os question papers_page-0012 1.jpg","x":2962,"y":-8502,"width":367,"height":519},
		{"id":"ca9ca14b5c1ace84","type":"file","file":"pl n os question papers_page-0002 1.jpg","x":2962,"y":-9080,"width":367,"height":519},
		{"id":"543250f60aae27d8","type":"file","file":"pl n os question papers_page-0011 1.jpg","x":2384,"y":-8502,"width":367,"height":519},
		{"id":"1636cf479bc77b6c","type":"file","file":"pl n os question papers_page-0013 1.jpg","x":3539,"y":-8502,"width":367,"height":519},
		{"id":"13c5ed39d2f995ab","type":"file","file":"pl n os question papers_page-0003 1.jpg","x":3539,"y":-9080,"width":367,"height":519},
		{"id":"9e21c2c5ad26b7fc","type":"file","file":"pl n os question papers_page-0026 1.jpg","x":1807,"y":-9080,"width":367,"height":519},
		{"id":"5ca2a92409a10b6b","type":"file","file":"pl n os question papers_page-0020 1.jpg","x":4694,"y":-7886,"width":367,"height":519},
		{"id":"da55c7fa36aeb553","type":"file","file":"pl n os question papers_page-0025 1.jpg","x":4117,"y":-7886,"width":367,"height":519},
		{"id":"9c6183bb8639cbcc","type":"file","file":"pl n os question papers_page-0021 1.jpg","x":2384,"y":-7886,"width":367,"height":519},
		{"id":"4abc3a1142dc53ab","type":"file","file":"pl n os question papers_page-0023 1.jpg","x":2962,"y":-7886,"width":367,"height":519},
		{"id":"bfa959739ff60967","type":"file","file":"pl n os question papers_page-0019 1.jpg","x":1807,"y":-7886,"width":367,"height":519},
		{"id":"438d0594458419a3","type":"file","file":"pl n os question papers_page-0024 1.jpg","x":3539,"y":-7886,"width":367,"height":519},
		{"id":"8855755439c0650b","type":"file","file":"pl n os question papers_page-0004 1.jpg","x":4117,"y":-9080,"width":367,"height":519},
		{"id":"861b4e4c886b366c","type":"file","file":"pl n os question papers_page-0005 1.jpg","x":4694,"y":-9840,"width":367,"height":519},
		{"id":"98c4a2c517ccbecc","type":"file","file":"pl n os question papers_page-0014 1.jpg","x":4117,"y":-8502,"width":367,"height":519},
		{"id":"f9c46eebc8e4e2b1","type":"file","file":"pl n os question papers_page-0015 1.jpg","x":4694,"y":-8502,"width":367,"height":519},
		{"id":"5f58c3f91b3940eb","type":"text","text":"1. resource allocator, structures of OS with dia\n2. PCB, explain purpose of **PCB**, **threading models**, **multi level feedback queue scheduling algo**\n3. Various activities performed by OS in connection with **Process management**, various states in which a process can exist with diagram\n4. **Differences b/w process and thread**, when do you need **preemption** of process, pros and cons of preemption\n5. OS Structure, Various computing environments\n6. Consider the set of processes with Burst time, ... ?? :![[Pasted image 20240322174028.png]]","x":1341,"y":-8502,"width":650,"height":616}
	],
	"edges":[
		{"id":"db7b68a02938f3ac","fromNode":"176871335e37c004","fromSide":"bottom","toNode":"3eef5f2d9fab36bd","toSide":"top"},
		{"id":"d9e0c68ce3a1a349","fromNode":"3eef5f2d9fab36bd","fromSide":"right","toNode":"8a7003345dc66592","toSide":"left"},
		{"id":"d5ba19ab19c68678","fromNode":"8a7003345dc66592","fromSide":"right","toNode":"3192e9f1dc474401","toSide":"left"},
		{"id":"7d80f996dc1d4e97","fromNode":"8a7003345dc66592","fromSide":"right","toNode":"3585f3a0aa3b3b0a","toSide":"left"},
		{"id":"7c9958fe31fe6a50","fromNode":"3585f3a0aa3b3b0a","fromSide":"right","toNode":"9e96c053298562f6","toSide":"left"},
		{"id":"10c1fec28aa703f8","fromNode":"3585f3a0aa3b3b0a","fromSide":"right","toNode":"0a24dd997ea7694a","toSide":"left"},
		{"id":"32e3c7c3682c5dad","fromNode":"8a7003345dc66592","fromSide":"right","toNode":"ee81ab21412460f8","toSide":"left"},
		{"id":"e523caa0c26b4901","fromNode":"ee81ab21412460f8","fromSide":"right","toNode":"88391efe5de67269","toSide":"left"},
		{"id":"77bc006143a3617d","fromNode":"88391efe5de67269","fromSide":"right","toNode":"eb875c51b977b5f2","toSide":"left"},
		{"id":"6875e1936b79e2eb","fromNode":"8a7003345dc66592","fromSide":"right","toNode":"df0c0f8beec88bdf","toSide":"left"},
		{"id":"65e8779ffdeafff5","fromNode":"274a8d48ae369343","fromSide":"right","toNode":"b34efdba064e4a45","toSide":"left"},
		{"id":"40fa0626dbacab7f","fromNode":"b34efdba064e4a45","fromSide":"right","toNode":"0a02fcf334b31705","toSide":"left"},
		{"id":"efedce1cff09c67a","fromNode":"0a02fcf334b31705","fromSide":"right","toNode":"b8e70a5f0f2073ef","toSide":"left"},
		{"id":"168e7930fcd30c2c","fromNode":"0a02fcf334b31705","fromSide":"right","toNode":"7062f97a89678b23","toSide":"left"},
		{"id":"baa882ad34873b08","fromNode":"0a02fcf334b31705","fromSide":"top","toNode":"e3267cc35678f13b","toSide":"bottom"},
		{"id":"27ab9258e6515411","fromNode":"b8e70a5f0f2073ef","fromSide":"right","toNode":"400f0f496bc2aaa0","toSide":"left"},
		{"id":"cef36b48b4aa99be","fromNode":"7062f97a89678b23","fromSide":"right","toNode":"b1937a5c6bc210a9","toSide":"left"},
		{"id":"238654831b4b14bb","fromNode":"0a02fcf334b31705","fromSide":"bottom","toNode":"322028eb5fa23d73","toSide":"top"},
		{"id":"2cc491177d12dea0","fromNode":"322028eb5fa23d73","fromSide":"right","toNode":"b1f3e81f4df92b50","toSide":"left"},
		{"id":"6ecb6e1f90bd597d","fromNode":"322028eb5fa23d73","fromSide":"right","toNode":"1b14eff446ebc3b0","toSide":"left"},
		{"id":"257e4b171e410112","fromNode":"322028eb5fa23d73","fromSide":"right","toNode":"3684487f34cd3a04","toSide":"left"},
		{"id":"79eddba57c685405","fromNode":"3684487f34cd3a04","fromSide":"right","toNode":"9fc2c25ba1a3825f","toSide":"left"},
		{"id":"d82c407a7393b31d","fromNode":"b1f3e81f4df92b50","fromSide":"right","toNode":"e152b3a59acb4a43","toSide":"left"},
		{"id":"b4d5958feecff886","fromNode":"1b14eff446ebc3b0","fromSide":"right","toNode":"e152b3a59acb4a43","toSide":"left"},
		{"id":"105d7b51bc84154b","fromNode":"e152b3a59acb4a43","fromSide":"right","toNode":"24c7a3180befacca","toSide":"left"},
		{"id":"1d317134be3e2df2","fromNode":"e152b3a59acb4a43","fromSide":"right","toNode":"7e7ce951562895cc","toSide":"left"},
		{"id":"6706cedf4253b2fb","fromNode":"b34efdba064e4a45","fromSide":"right","toNode":"4c8238c4bdb8e47f","toSide":"left"},
		{"id":"4c407cdf3fb99d49","fromNode":"4c8238c4bdb8e47f","fromSide":"right","toNode":"a2d3195703843781","toSide":"left"},
		{"id":"c68361d97acccc81","fromNode":"4c8238c4bdb8e47f","fromSide":"right","toNode":"9a1805acaf75faf8","toSide":"left"},
		{"id":"9cc7ce6e053ffd45","fromNode":"4c8238c4bdb8e47f","fromSide":"right","toNode":"bbda6d64c9adfa74","toSide":"left"},
		{"id":"5b8635767bcf5f76","fromNode":"0118ad83fa679b10","fromSide":"right","toNode":"faaea46be1f80bca","toSide":"left"},
		{"id":"712934a6cec18443","fromNode":"faaea46be1f80bca","fromSide":"right","toNode":"0e1a135bd53168b9","toSide":"left"},
		{"id":"495940319676ca9e","fromNode":"0e1a135bd53168b9","fromSide":"right","toNode":"dec76348e963cd8d","toSide":"left"},
		{"id":"bd7ef5808d6bb04d","fromNode":"faaea46be1f80bca","fromSide":"right","toNode":"a90177d18354fe35","toSide":"left"},
		{"id":"519060b35c80e337","fromNode":"a90177d18354fe35","fromSide":"right","toNode":"11ece5153ffeb7fd","toSide":"left"},
		{"id":"a9f93ffd25948591","fromNode":"11ece5153ffeb7fd","fromSide":"right","toNode":"88bcb3a60e50a3cc","toSide":"left"},
		{"id":"f14b35e6e277876e","fromNode":"66580a8e4455369b","fromSide":"right","toNode":"fd5a621cf2fd4de6","toSide":"left"},
		{"id":"02c7758e18d708e3","fromNode":"1fe6a3fc31813581","fromSide":"right","toNode":"d32653e210f273fd","toSide":"left"},
		{"id":"e80daef07e38a963","fromNode":"96dba9a82fdafe03","fromSide":"right","toNode":"ea68f54cee7b6b38","toSide":"left"},
		{"id":"ed4a8717d782f7b2","fromNode":"faaea46be1f80bca","fromSide":"right","toNode":"7570e22f9af82a40","toSide":"left"},
		{"id":"a49a06c653a238c3","fromNode":"7570e22f9af82a40","fromSide":"right","toNode":"70fa4c6f4699f80a","toSide":"left"},
		{"id":"55902e69887212c9","fromNode":"70fa4c6f4699f80a","fromSide":"right","toNode":"f4b65f11b0d6bfe3","toSide":"left"},
		{"id":"0f9e923955506802","fromNode":"7570e22f9af82a40","fromSide":"right","toNode":"1c8c391f6a3f1523","toSide":"left"},
		{"id":"c3415c5850d8476a","fromNode":"1c8c391f6a3f1523","fromSide":"right","toNode":"e3ef2f99e7eaca1e","toSide":"left"},
		{"id":"a03238424b32565a","fromNode":"7570e22f9af82a40","fromSide":"right","toNode":"de2e6ec7a8cb8706","toSide":"left"},
		{"id":"187d9afcde943e6f","fromNode":"de2e6ec7a8cb8706","fromSide":"right","toNode":"767146d5af10a216","toSide":"left"},
		{"id":"8f5dc2c271d22557","fromNode":"7570e22f9af82a40","fromSide":"right","toNode":"984a35d04144b650","toSide":"left"},
		{"id":"5c252d933551f263","fromNode":"984a35d04144b650","fromSide":"right","toNode":"00d482cfe02bd671","toSide":"left"},
		{"id":"845de5d068574723","fromNode":"7570e22f9af82a40","fromSide":"right","toNode":"fe87ee4b804b9415","toSide":"left"},
		{"id":"c159674dc0bd0ab0","fromNode":"fe87ee4b804b9415","fromSide":"right","toNode":"82bfb3bcb649907e","toSide":"left"},
		{"id":"5eb8a12b9b09cc87","fromNode":"faaea46be1f80bca","fromSide":"right","toNode":"50464c47fdb2ac8a","toSide":"left"},
		{"id":"c710ac0af381d925","fromNode":"50464c47fdb2ac8a","fromSide":"right","toNode":"ba9b89eed4e68966","toSide":"left"},
		{"id":"d790ab2acac9e8f5","fromNode":"faaea46be1f80bca","fromSide":"right","toNode":"daa58699613129f6","toSide":"left"},
		{"id":"be3a64740531b319","fromNode":"daa58699613129f6","fromSide":"right","toNode":"6e0392043124df84","toSide":"left"},
		{"id":"fa36298a9f134683","fromNode":"6e0392043124df84","fromSide":"right","toNode":"ecb3d7e35d88eb4a","toSide":"left"},
		{"id":"248eb23725bc4994","fromNode":"ecb3d7e35d88eb4a","fromSide":"right","toNode":"bbda407919f6bedc","toSide":"left"},
		{"id":"400ff4f1fa81704e","fromNode":"faaea46be1f80bca","fromSide":"right","toNode":"2e762c1e0952bf5e","toSide":"left"},
		{"id":"883278c1aa936083","fromNode":"2e762c1e0952bf5e","fromSide":"right","toNode":"faa8fbc57ff70a40","toSide":"left"},
		{"id":"21b5b10b4ec0f454","fromNode":"6e0392043124df84","fromSide":"right","toNode":"705e7c70d4c4b833","toSide":"left"},
		{"id":"e5858826d9754d36","fromNode":"705e7c70d4c4b833","fromSide":"right","toNode":"ffab760a9d2a3c7e","toSide":"left"},
		{"id":"cead03904bd3d25e","fromNode":"ffab760a9d2a3c7e","fromSide":"right","toNode":"00c2ff68de22894e","toSide":"left"},
		{"id":"c7bb0925398dcec2","fromNode":"faaea46be1f80bca","fromSide":"right","toNode":"e58268b6c6ccca40","toSide":"left"},
		{"id":"004f84477503e4e5","fromNode":"e58268b6c6ccca40","fromSide":"right","toNode":"27169175186853e8","toSide":"left"},
		{"id":"097c691707142e53","fromNode":"e58268b6c6ccca40","fromSide":"right","toNode":"6be1eb69407579e0","toSide":"left"},
		{"id":"0cb4e39d73371ac1","fromNode":"6be1eb69407579e0","fromSide":"right","toNode":"e357ad2c8aef6000","toSide":"left"},
		{"id":"8343cafa3569a39c","fromNode":"e58268b6c6ccca40","fromSide":"right","toNode":"d3299e451b0aef4a","toSide":"left"},
		{"id":"9e6f98139e64d226","fromNode":"d3299e451b0aef4a","fromSide":"right","toNode":"418e86af458e9114","toSide":"left"},
		{"id":"df31c39e12fd0eb9","fromNode":"418e86af458e9114","fromSide":"right","toNode":"390dbfab20fd54ca","toSide":"left"},
		{"id":"288a8bef24ec47c4","fromNode":"faaea46be1f80bca","fromSide":"right","toNode":"6d7d95d77684ac6b","toSide":"left"},
		{"id":"d5130a9dcc031534","fromNode":"6d7d95d77684ac6b","fromSide":"right","toNode":"06a64b55709edd17","toSide":"left"},
		{"id":"17b804d95aa510f3","fromNode":"06a64b55709edd17","fromSide":"right","toNode":"10fc6d82e8b449d7","toSide":"left"},
		{"id":"7f9e297be44d2ae8","fromNode":"bd1ba4cb2040dcf4","fromSide":"right","toNode":"1b141c4b12e68bb7","toSide":"left"},
		{"id":"b85519b89507fb2c","fromNode":"1b141c4b12e68bb7","fromSide":"right","toNode":"1486ad25c1b68a42","toSide":"left"},
		{"id":"e4216db71ca17e1f","fromNode":"1486ad25c1b68a42","fromSide":"right","toNode":"af9220ce68606202","toSide":"left"},
		{"id":"7743dca312b35b46","fromNode":"1b141c4b12e68bb7","fromSide":"right","toNode":"0028662b749edea0","toSide":"left"},
		{"id":"8f0a0d386dd48063","fromNode":"af9220ce68606202","fromSide":"right","toNode":"4115932b3059a58e","toSide":"left"},
		{"id":"fc8a1ac48ebbb6af","fromNode":"1b141c4b12e68bb7","fromSide":"right","toNode":"f3a3a9d1b071a3f7","toSide":"left"},
		{"id":"163a5a9696b01ac4","fromNode":"f3a3a9d1b071a3f7","fromSide":"right","toNode":"a7d7dbac008a4cb8","toSide":"left"},
		{"id":"8dc332a054df9538","fromNode":"a7d7dbac008a4cb8","fromSide":"right","toNode":"81c5a43e2dc54595","toSide":"left"},
		{"id":"020329512cbae3f3","fromNode":"1b141c4b12e68bb7","fromSide":"right","toNode":"ea8c0c08bb92a093","toSide":"left"},
		{"id":"f20010bba957163f","fromNode":"ea8c0c08bb92a093","fromSide":"right","toNode":"d8224663377b48fc","toSide":"left"},
		{"id":"1b408f9947fca913","fromNode":"1b141c4b12e68bb7","fromSide":"right","toNode":"78aaf45ae2824995","toSide":"left"},
		{"id":"2fbb58fe3cd23c09","fromNode":"aa4d09cbed6a510d","fromSide":"right","toNode":"77df4e11dac3dc7b","toSide":"left"},
		{"id":"ad6b3e482e0d67da","fromNode":"d8224663377b48fc","fromSide":"right","toNode":"2842b36852710fa9","toSide":"left"},
		{"id":"43e839220ccd2554","fromNode":"78aaf45ae2824995","fromSide":"right","toNode":"438c95b7e34285b5","toSide":"left"},
		{"id":"2c56de85edfc5d91","fromNode":"438c95b7e34285b5","fromSide":"right","toNode":"f46f783e880b1056","toSide":"left"},
		{"id":"f9c6c2ec5b6d0c49","fromNode":"f46f783e880b1056","fromSide":"right","toNode":"8135ae8c75675905","toSide":"left"},
		{"id":"1cbec2a775a6cf67","fromNode":"438c95b7e34285b5","fromSide":"right","toNode":"5997022a45356039","toSide":"left"},
		{"id":"e8f3a14ff2d3adb5","fromNode":"438c95b7e34285b5","fromSide":"right","toNode":"aa4d09cbed6a510d","toSide":"left"},
		{"id":"3b3dde6c6df69af1","fromNode":"438c95b7e34285b5","fromSide":"right","toNode":"508499a9ef319c3c","toSide":"left"},
		{"id":"a4a0a6a9c52640cd","fromNode":"508499a9ef319c3c","fromSide":"right","toNode":"5eb10130c132eb2a","toSide":"left"},
		{"id":"f691cbbba894e0f8","fromNode":"78aaf45ae2824995","fromSide":"right","toNode":"bfd141236889ff6b","toSide":"left"},
		{"id":"a7030ffbf25a1973","fromNode":"bfd141236889ff6b","fromSide":"right","toNode":"5bcca0bf353ccc83","toSide":"left"},
		{"id":"0ed5453cf6cf3736","fromNode":"5bcca0bf353ccc83","fromSide":"right","toNode":"3ae06c8068f01834","toSide":"left"},
		{"id":"8b43ec0d0ba03b70","fromNode":"78aaf45ae2824995","fromSide":"right","toNode":"409e1db2af4dd131","toSide":"left"},
		{"id":"7db39eb63e19ce5f","fromNode":"409e1db2af4dd131","fromSide":"right","toNode":"7fdf4b232be8768b","toSide":"left"},
		{"id":"c29058a8a832130b","fromNode":"7fdf4b232be8768b","fromSide":"right","toNode":"89814b136e0f6887","toSide":"left"},
		{"id":"1bef4027f6bf5d92","fromNode":"89814b136e0f6887","fromSide":"right","toNode":"f143ba40a15e6d79","toSide":"left"},
		{"id":"5ad2014384fa3759","fromNode":"78aaf45ae2824995","fromSide":"right","toNode":"e4497f6014383f61","toSide":"left"},
		{"id":"fb2d56e325cc7eeb","fromNode":"e4497f6014383f61","fromSide":"right","toNode":"e078d5137f2ee806","toSide":"left"},
		{"id":"ef18f22035ef5fd9","fromNode":"e078d5137f2ee806","fromSide":"right","toNode":"26c73dfedfb13495","toSide":"left"},
		{"id":"ce620143da5c04ee","fromNode":"26c73dfedfb13495","fromSide":"right","toNode":"dc6f90c3c8c99fdd","toSide":"left"},
		{"id":"35dc4278de6ec232","fromNode":"26c73dfedfb13495","fromSide":"right","toNode":"adaf181b7118c19d","toSide":"left"},
		{"id":"3b85ba7425e0b23c","fromNode":"26c73dfedfb13495","fromSide":"right","toNode":"43ff9bdc12fba660","toSide":"left"}
	]
}